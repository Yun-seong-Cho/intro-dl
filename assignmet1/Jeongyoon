{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMFvm7Z/+zuDvVOx533eLZ9"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        " **Question 1. How can I move to the dictionary I want using the library os & Linux command?**\n",
        "*     I'd like to move the directory name '/content/sample_data'\n",
        "\n",
        "(1) os.chdir('/content/sample_data')  (os)\n",
        "\n",
        "\n",
        "(2) %cd /content/sample_data (cd)\n",
        "\n"
      ],
      "metadata": {
        "id": "7i5AIe8uO-QR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 2. Please write a code that copies new.txt with a file name new3.txt.**\n",
        "\n",
        "*  Directory: /content/drive/MyDrive/intro-dl/afhq/new_folder\n",
        "\n",
        "(1) src = '/content/drive/MyDrive/intro-dl/afhq/new_folder/new.txt'\n",
        "\n",
        "\n",
        "(2) dst = '/content/drive/MyDrive/intro-dl/afhq/new_folder/new3.txt'\n"
      ],
      "metadata": {
        "id": "DHdptvOeQobJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Simple Question. What is (Py)torch?**\n",
        "\n",
        "A. PyTorch는 Python을 위한 오픈소스 머신 러닝 라이브러리이다.\n"
      ],
      "metadata": {
        "id": "sbBUAmjPTRig"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 3. Compute L1/L2 Norm between matrix1 and matrix2 above.**\n"
      ],
      "metadata": {
        "id": "7JF7q8KRT3EX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch"
      ],
      "metadata": {
        "id": "Ua9ulC3GUxpB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "matrix1 = torch.tensor([[1., 2.], [3., 4.]])\n",
        "matrix2 = torch.tensor([[5., 6.], [7., 8.]])"
      ],
      "metadata": {
        "id": "PENRUZSlU7OL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "L1_norm = torch.norm(matrix1 - matrix2, p=1)\n",
        "L2_norm = torch.norm(matrix1 - matrix2, p=2)\n",
        "print(L1_norm)\n",
        "print(L2_norm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JvBD0caIVLJi",
        "outputId": "f9f6c61f-ab69-4b43-b610-bb4b4807174d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(16.)\n",
            "tensor(8.)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vector1 = matrix1.view(-1)\n",
        "vector2 = matrix2.view(-1)\n",
        "dot = torch.dot(vector1, vector2)\n",
        "norm1 = torch.norm(vector1, p=2)\n",
        "norm2 = torch.norm(vector2, p=2)"
      ],
      "metadata": {
        "id": "eVUpc5E1YR50"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cosine_similarity = dot / ((norm1)*(norm2))"
      ],
      "metadata": {
        "id": "34AHY_qGZTES"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(cosine_similarity)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5ZE8Zwz4ak7Z",
        "outputId": "c479e9dd-fad1-4239-b20b-bcce8451933c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(0.9689)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 4. Please write a line-by-line explanation of the code above. (Simple MLP only)**"
      ],
      "metadata": {
        "id": "3wiO2_UY5eNV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 모듈설정\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torchvision import transforms, datasets"
      ],
      "metadata": {
        "id": "QtEpnQisao5m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 실행 방법 설정\n",
        "\n",
        "if torch.cuda.is_available():\n",
        "    DEVICE = torch.device('cuda')\n",
        "else:\n",
        "    DEVICE = torch.device('cpu')\n",
        "\n",
        "print('Using PyTorch version:', torch.__version__, ' Device:', DEVICE)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sWWfM5w756pe",
        "outputId": "594a4eef-cf8b-4e81-bdac-0d614d5ec088"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using PyTorch version: 2.1.0+cu121  Device: cpu\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 파라미터 설정\n",
        "\n",
        "BATCH_SIZE = 32\n",
        "EPOCHS = 10"
      ],
      "metadata": {
        "id": "fvx0GvOb56gY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "''' 3. MNIST Download (Train set, Test set split) '''\n",
        "train_dataset = datasets.MNIST(root = \"../data/MNIST\",\n",
        "                               train = True,\n",
        "                               download = True,\n",
        "                               transform = transforms.ToTensor()) # training dataset 설정\n",
        "\n",
        "test_dataset = datasets.MNIST(root = \"../data/MNIST\",\n",
        "                              train = False,\n",
        "                             transform = transforms.ToTensor()) # test dataset 설정\n",
        "\n",
        "train_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n",
        "                                           batch_size = BATCH_SIZE,\n",
        "                                           shuffle = True)  # training data 배치사이즈로 나누고 셔플\n",
        "\n",
        "test_loader = torch.utils.data.DataLoader(dataset = test_dataset,\n",
        "                                          batch_size = BATCH_SIZE,\n",
        "                                          shuffle = False)  # test data는 셔플하지 않음"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VWemPzQ856R0",
        "outputId": "fda5b4f9-94c7-4c6b-b709-11423c24e2f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ../data/MNIST/MNIST/raw/train-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 9912422/9912422 [00:00<00:00, 105140774.31it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ../data/MNIST/MNIST/raw/train-images-idx3-ubyte.gz to ../data/MNIST/MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ../data/MNIST/MNIST/raw/train-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 28881/28881 [00:00<00:00, 71298230.62it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ../data/MNIST/MNIST/raw/train-labels-idx1-ubyte.gz to ../data/MNIST/MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ../data/MNIST/MNIST/raw/t10k-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n",
            "100%|██████████| 1648877/1648877 [00:00<00:00, 28953623.22it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ../data/MNIST/MNIST/raw/t10k-images-idx3-ubyte.gz to ../data/MNIST/MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ../data/MNIST/MNIST/raw/t10k-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 4542/4542 [00:00<00:00, 3704166.59it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ../data/MNIST/MNIST/raw/t10k-labels-idx1-ubyte.gz to ../data/MNIST/MNIST/raw\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 이미지 사이즈와 타입 보기\n",
        "\n",
        "for (X_train, y_train) in train_loader:\n",
        "    print('X_train:', X_train.size(), 'type:', X_train.type())\n",
        "    print('y_train:', y_train.size(), 'type:', y_train.type())\n",
        "    break"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UyCOcjaa6GxU",
        "outputId": "04170d1c-4131-4429-a8a7-5666fa8da5c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train: torch.Size([32, 1, 28, 28]) type: torch.FloatTensor\n",
            "y_train: torch.Size([32]) type: torch.LongTensor\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pltsize = 1\n",
        "plt.figure(figsize=(10 * pltsize, pltsize)) # 가로로 길게 도표 만들기\n",
        "for i in range(10): # 10개의 이미지 시각화\n",
        "    plt.subplot(1, 10, i + 1)\n",
        "    plt.axis('off')\n",
        "    plt.imshow(X_train[i, :, :, :].numpy().reshape(28, 28), cmap = \"gray_r\") # 이미지 pytorch에서 numpy로 변경, 28*28사이즈, 반전도 회색설정\n",
        "    plt.title('Class: ' + str(y_train[i].item())) # 도표 제목 설정"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "3xDgIUz26GvC",
        "outputId": "469861e4-266e-43d8-e2d2-8b3973afd53e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x100 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "''' Multi Layer Perceptron '''\n",
        "class Net(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Net, self).__init__()\n",
        "        self.fc1 = nn.Linear(28 * 28, 512)\n",
        "        self.fc2 = nn.Linear(512, 256)\n",
        "        self.fc3 = nn.Linear(256, 10)  # fully connected layer 설정\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.view(-1, 28 * 28) # 1D로 변경\n",
        "        x = self.fc1(x)\n",
        "        x = F.sigmoid(x)\n",
        "        x = self.fc2(x)\n",
        "        x = F.sigmoid(x)\n",
        "        x = self.fc3(x)\n",
        "        x = F.log_softmax(x, dim = 1)\n",
        "        return x"
      ],
      "metadata": {
        "id": "KdHgdDLv6Gsx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "''' Optimizer, Objective Function '''\n",
        "model = Net().to(DEVICE)\n",
        "optimizer = torch.optim.SGD(model.parameters(), lr = 0.01, momentum = 0.5) # 최적화 파라미터 전달,학습률=0.01,모멘텀=0.5\n",
        "criterion = nn.CrossEntropyLoss() # loss함수 정의\n",
        "\n",
        "print(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2hQr8qM56Gqh",
        "outputId": "b8ff4735-5c6f-4213-e1f7-5dd1e8253930"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Net(\n",
            "  (fc1): Linear(in_features=784, out_features=512, bias=True)\n",
            "  (fc2): Linear(in_features=512, out_features=256, bias=True)\n",
            "  (fc3): Linear(in_features=256, out_features=10, bias=True)\n",
            ")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def train(model, train_loader, optimizer, log_interval):  # train 함수 정의\n",
        "    model.train()                                         # ???\n",
        "    for batch_idx, (image, label) in enumerate(train_loader):\n",
        "        image = image.to(DEVICE)\n",
        "        label = label.to(DEVICE)\n",
        "        optimizer.zero_grad()\n",
        "        output = model(image)\n",
        "        loss = criterion(output, label)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        if batch_idx % log_interval == 0:\n",
        "            print(\"Train Epoch: {} [{}/{} ({:.0f}%)]\\tTrain Loss: {:.6f}\".format(\n",
        "                epoch, batch_idx * len(image),\n",
        "                len(train_loader.dataset), 100. * batch_idx / len(train_loader),\n",
        "                loss.item()))"
      ],
      "metadata": {
        "id": "T8lQrkmh6Gn9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def evaluate(model, test_loader): # 모델 평가 함수\n",
        "    model.eval()                  # ???\n",
        "    test_loss = 0\n",
        "    correct = 0\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for image, label in test_loader:\n",
        "            image = image.to(DEVICE)\n",
        "            label = label.to(DEVICE)\n",
        "            output = model(image)\n",
        "            test_loss += criterion(output, label).item()\n",
        "            prediction = output.max(1, keepdim = True)[1]\n",
        "            correct += prediction.eq(label.view_as(prediction)).sum().item()\n",
        "\n",
        "    test_loss /= (len(test_loader.dataset) / BATCH_SIZE)\n",
        "    test_accuracy = 100. * correct / len(test_loader.dataset)\n",
        "    return test_loss, test_accuracy"
      ],
      "metadata": {
        "id": "dgI4dHiA6Glb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "for epoch in range(1, EPOCHS + 1):\n",
        "    train(model, train_loader, optimizer, log_interval = 200)\n",
        "    test_loss, test_accuracy = evaluate(model, test_loader)\n",
        "    print(\"\\n[EPOCH: {}], \\tTest Loss: {:.4f}, \\tTest Accuracy: {:.2f} % \\n\".format(\n",
        "        epoch, test_loss, test_accuracy))\n",
        "\n",
        "# 결과 : 각 epoch이 끝날때 마다 모델 평가"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5oT_bee46avF",
        "outputId": "cb97ad98-ba54-4f8c-94b9-7158369529b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Epoch: 1 [0/60000 (0%)]\tTrain Loss: 2.355049\n",
            "Train Epoch: 1 [6400/60000 (11%)]\tTrain Loss: 2.367762\n",
            "Train Epoch: 1 [12800/60000 (21%)]\tTrain Loss: 2.314343\n",
            "Train Epoch: 1 [19200/60000 (32%)]\tTrain Loss: 2.302140\n",
            "Train Epoch: 1 [25600/60000 (43%)]\tTrain Loss: 2.287019\n",
            "Train Epoch: 1 [32000/60000 (53%)]\tTrain Loss: 2.304344\n",
            "Train Epoch: 1 [38400/60000 (64%)]\tTrain Loss: 2.279316\n",
            "Train Epoch: 1 [44800/60000 (75%)]\tTrain Loss: 2.272157\n",
            "Train Epoch: 1 [51200/60000 (85%)]\tTrain Loss: 2.295672\n",
            "Train Epoch: 1 [57600/60000 (96%)]\tTrain Loss: 2.233999\n",
            "\n",
            "[EPOCH: 1], \tTest Loss: 2.2277, \tTest Accuracy: 19.27 % \n",
            "\n",
            "Train Epoch: 2 [0/60000 (0%)]\tTrain Loss: 2.240589\n",
            "Train Epoch: 2 [6400/60000 (11%)]\tTrain Loss: 2.156780\n",
            "Train Epoch: 2 [12800/60000 (21%)]\tTrain Loss: 2.146982\n",
            "Train Epoch: 2 [19200/60000 (32%)]\tTrain Loss: 2.033547\n",
            "Train Epoch: 2 [25600/60000 (43%)]\tTrain Loss: 1.925789\n",
            "Train Epoch: 2 [32000/60000 (53%)]\tTrain Loss: 1.939375\n",
            "Train Epoch: 2 [38400/60000 (64%)]\tTrain Loss: 1.664414\n",
            "Train Epoch: 2 [44800/60000 (75%)]\tTrain Loss: 1.530701\n",
            "Train Epoch: 2 [51200/60000 (85%)]\tTrain Loss: 1.244880\n",
            "Train Epoch: 2 [57600/60000 (96%)]\tTrain Loss: 1.357386\n",
            "\n",
            "[EPOCH: 2], \tTest Loss: 1.2632, \tTest Accuracy: 65.71 % \n",
            "\n",
            "Train Epoch: 3 [0/60000 (0%)]\tTrain Loss: 1.345357\n",
            "Train Epoch: 3 [6400/60000 (11%)]\tTrain Loss: 1.250451\n",
            "Train Epoch: 3 [12800/60000 (21%)]\tTrain Loss: 1.373580\n",
            "Train Epoch: 3 [19200/60000 (32%)]\tTrain Loss: 1.070424\n",
            "Train Epoch: 3 [25600/60000 (43%)]\tTrain Loss: 0.961004\n",
            "Train Epoch: 3 [32000/60000 (53%)]\tTrain Loss: 0.785944\n",
            "Train Epoch: 3 [38400/60000 (64%)]\tTrain Loss: 0.934502\n",
            "Train Epoch: 3 [44800/60000 (75%)]\tTrain Loss: 0.851001\n",
            "Train Epoch: 3 [51200/60000 (85%)]\tTrain Loss: 0.918360\n",
            "Train Epoch: 3 [57600/60000 (96%)]\tTrain Loss: 0.561683\n",
            "\n",
            "[EPOCH: 3], \tTest Loss: 0.7345, \tTest Accuracy: 78.42 % \n",
            "\n",
            "Train Epoch: 4 [0/60000 (0%)]\tTrain Loss: 0.715253\n",
            "Train Epoch: 4 [6400/60000 (11%)]\tTrain Loss: 1.010423\n",
            "Train Epoch: 4 [12800/60000 (21%)]\tTrain Loss: 0.676187\n",
            "Train Epoch: 4 [19200/60000 (32%)]\tTrain Loss: 0.699678\n",
            "Train Epoch: 4 [25600/60000 (43%)]\tTrain Loss: 0.527675\n",
            "Train Epoch: 4 [32000/60000 (53%)]\tTrain Loss: 0.706259\n",
            "Train Epoch: 4 [38400/60000 (64%)]\tTrain Loss: 0.606976\n",
            "Train Epoch: 4 [44800/60000 (75%)]\tTrain Loss: 0.641381\n",
            "Train Epoch: 4 [51200/60000 (85%)]\tTrain Loss: 0.381496\n",
            "Train Epoch: 4 [57600/60000 (96%)]\tTrain Loss: 0.486659\n",
            "\n",
            "[EPOCH: 4], \tTest Loss: 0.5375, \tTest Accuracy: 84.50 % \n",
            "\n",
            "Train Epoch: 5 [0/60000 (0%)]\tTrain Loss: 0.537284\n",
            "Train Epoch: 5 [6400/60000 (11%)]\tTrain Loss: 0.357801\n",
            "Train Epoch: 5 [12800/60000 (21%)]\tTrain Loss: 0.394581\n",
            "Train Epoch: 5 [19200/60000 (32%)]\tTrain Loss: 0.316909\n",
            "Train Epoch: 5 [25600/60000 (43%)]\tTrain Loss: 0.665982\n",
            "Train Epoch: 5 [32000/60000 (53%)]\tTrain Loss: 0.291181\n",
            "Train Epoch: 5 [38400/60000 (64%)]\tTrain Loss: 0.465842\n",
            "Train Epoch: 5 [44800/60000 (75%)]\tTrain Loss: 0.391876\n",
            "Train Epoch: 5 [51200/60000 (85%)]\tTrain Loss: 0.407526\n",
            "Train Epoch: 5 [57600/60000 (96%)]\tTrain Loss: 0.488887\n",
            "\n",
            "[EPOCH: 5], \tTest Loss: 0.4524, \tTest Accuracy: 86.61 % \n",
            "\n",
            "Train Epoch: 6 [0/60000 (0%)]\tTrain Loss: 0.801902\n",
            "Train Epoch: 6 [6400/60000 (11%)]\tTrain Loss: 0.358199\n",
            "Train Epoch: 6 [12800/60000 (21%)]\tTrain Loss: 0.616581\n",
            "Train Epoch: 6 [19200/60000 (32%)]\tTrain Loss: 0.657964\n",
            "Train Epoch: 6 [25600/60000 (43%)]\tTrain Loss: 0.717628\n",
            "Train Epoch: 6 [32000/60000 (53%)]\tTrain Loss: 0.177326\n",
            "Train Epoch: 6 [38400/60000 (64%)]\tTrain Loss: 0.543716\n",
            "Train Epoch: 6 [44800/60000 (75%)]\tTrain Loss: 0.481905\n",
            "Train Epoch: 6 [51200/60000 (85%)]\tTrain Loss: 0.482482\n",
            "Train Epoch: 6 [57600/60000 (96%)]\tTrain Loss: 0.325828\n",
            "\n",
            "[EPOCH: 6], \tTest Loss: 0.4022, \tTest Accuracy: 88.31 % \n",
            "\n",
            "Train Epoch: 7 [0/60000 (0%)]\tTrain Loss: 0.328289\n",
            "Train Epoch: 7 [6400/60000 (11%)]\tTrain Loss: 0.215883\n",
            "Train Epoch: 7 [12800/60000 (21%)]\tTrain Loss: 0.394564\n",
            "Train Epoch: 7 [19200/60000 (32%)]\tTrain Loss: 0.318468\n",
            "Train Epoch: 7 [25600/60000 (43%)]\tTrain Loss: 0.366798\n",
            "Train Epoch: 7 [32000/60000 (53%)]\tTrain Loss: 0.414340\n",
            "Train Epoch: 7 [38400/60000 (64%)]\tTrain Loss: 0.435837\n",
            "Train Epoch: 7 [44800/60000 (75%)]\tTrain Loss: 0.138170\n",
            "Train Epoch: 7 [51200/60000 (85%)]\tTrain Loss: 0.213743\n",
            "Train Epoch: 7 [57600/60000 (96%)]\tTrain Loss: 0.170455\n",
            "\n",
            "[EPOCH: 7], \tTest Loss: 0.3741, \tTest Accuracy: 89.15 % \n",
            "\n",
            "Train Epoch: 8 [0/60000 (0%)]\tTrain Loss: 0.408354\n",
            "Train Epoch: 8 [6400/60000 (11%)]\tTrain Loss: 0.313366\n",
            "Train Epoch: 8 [12800/60000 (21%)]\tTrain Loss: 0.327734\n",
            "Train Epoch: 8 [19200/60000 (32%)]\tTrain Loss: 0.344904\n",
            "Train Epoch: 8 [25600/60000 (43%)]\tTrain Loss: 0.382953\n",
            "Train Epoch: 8 [32000/60000 (53%)]\tTrain Loss: 0.459140\n",
            "Train Epoch: 8 [38400/60000 (64%)]\tTrain Loss: 0.371917\n",
            "Train Epoch: 8 [44800/60000 (75%)]\tTrain Loss: 0.239452\n",
            "Train Epoch: 8 [51200/60000 (85%)]\tTrain Loss: 0.117525\n",
            "Train Epoch: 8 [57600/60000 (96%)]\tTrain Loss: 0.146360\n",
            "\n",
            "[EPOCH: 8], \tTest Loss: 0.3599, \tTest Accuracy: 89.67 % \n",
            "\n",
            "Train Epoch: 9 [0/60000 (0%)]\tTrain Loss: 0.609924\n",
            "Train Epoch: 9 [6400/60000 (11%)]\tTrain Loss: 0.505985\n",
            "Train Epoch: 9 [12800/60000 (21%)]\tTrain Loss: 0.238593\n",
            "Train Epoch: 9 [19200/60000 (32%)]\tTrain Loss: 0.431424\n",
            "Train Epoch: 9 [25600/60000 (43%)]\tTrain Loss: 0.433760\n",
            "Train Epoch: 9 [32000/60000 (53%)]\tTrain Loss: 0.427749\n",
            "Train Epoch: 9 [38400/60000 (64%)]\tTrain Loss: 0.339979\n",
            "Train Epoch: 9 [44800/60000 (75%)]\tTrain Loss: 0.336326\n",
            "Train Epoch: 9 [51200/60000 (85%)]\tTrain Loss: 0.340132\n",
            "Train Epoch: 9 [57600/60000 (96%)]\tTrain Loss: 0.214076\n",
            "\n",
            "[EPOCH: 9], \tTest Loss: 0.3479, \tTest Accuracy: 89.91 % \n",
            "\n",
            "Train Epoch: 10 [0/60000 (0%)]\tTrain Loss: 0.251149\n",
            "Train Epoch: 10 [6400/60000 (11%)]\tTrain Loss: 0.158556\n",
            "Train Epoch: 10 [12800/60000 (21%)]\tTrain Loss: 0.478230\n",
            "Train Epoch: 10 [19200/60000 (32%)]\tTrain Loss: 0.165172\n",
            "Train Epoch: 10 [25600/60000 (43%)]\tTrain Loss: 0.682105\n",
            "Train Epoch: 10 [32000/60000 (53%)]\tTrain Loss: 0.614055\n",
            "Train Epoch: 10 [38400/60000 (64%)]\tTrain Loss: 0.292714\n",
            "Train Epoch: 10 [44800/60000 (75%)]\tTrain Loss: 0.490517\n",
            "Train Epoch: 10 [51200/60000 (85%)]\tTrain Loss: 0.286860\n",
            "Train Epoch: 10 [57600/60000 (96%)]\tTrain Loss: 0.456855\n",
            "\n",
            "[EPOCH: 10], \tTest Loss: 0.3349, \tTest Accuracy: 90.45 % \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 5 (Optional). Please read and summarize the following 3 documents**"
      ],
      "metadata": {
        "id": "ktOQiHb9527a"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "dv8gYeG2_-At"
      }
    }
  ]
}